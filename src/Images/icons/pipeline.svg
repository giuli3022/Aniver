<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64" width="512px" height="512px"><g><script xmlns="" id="metastreaminitscript" class="active-path" style="">(function() {
    document.getElementById('metastreaminitscript').remove()

    const INIT_TIMEOUT = 5e3
    const isFirefox = navigator.userAgent.toLowerCase().includes('firefox')

    //=========================================================================
    // document.createElement proxy
    //=========================================================================

    window.__metastreamMediaElements = new Set()

    // Proxy document.createElement to trap media elements created in-memory
    const origCreateElement = document.createElement
    const proxyCreateElement = function() {
      const element = origCreateElement.apply(document, arguments)
      if (window.__metastreamMediaElements &amp;&amp; element instanceof HTMLMediaElement) {
        window.__metastreamMediaElements.add(element)
      }
      return element
    }
    proxyCreateElement.toString = origCreateElement.toString.bind(origCreateElement)
    document.createElement = proxyCreateElement

    setTimeout(() =&gt; {
      if (window.__metastreamMediaElements) {
        window.__metastreamMediaElements.clear()
        window.__metastreamMediaElements = undefined
      }
    }, INIT_TIMEOUT)

    //=========================================================================
    // navigator.mediaSession proxy (Firefox)
    //=========================================================================

    if (isFirefox) {
      // stub out MediaSession API until Firefox supports this natively
      if (!navigator.mediaSession) {
        const noop = () =&gt; {}
        const mediaSessionStub = {
          __installedByMetastreamRemote__: true,
          setActionHandler: noop
        }
        Object.defineProperty(window.navigator, 'mediaSession', {
          value: mediaSessionStub,
          enumerable: false,
          writable: true
        })

        function MediaMetadata(metadata) {
          Object.assign(this, metadata)
        }
        window.MediaMetadata = MediaMetadata
      }

      const { mediaSession } = navigator

      // Capture action handlers for player.js proxy
      mediaSession._handlers = {}

      const _setActionHandler = mediaSession.setActionHandler
      mediaSession.setActionHandler = function(name, handler) {
        mediaSession._handlers[name] = handler
        _setActionHandler.apply(mediaSession, arguments)
      }
    }

    //=========================================================================
    // document.domain fix (Firefox)
    //=========================================================================

    if (isFirefox) {
      const domains = ['twitch.tv', 'crunchyroll.com']

      // Fix for setting document.domain in sandboxed iframe
      try {
        const { domain } = document
        if (domain &amp;&amp; domains.some(d =&gt; domain.includes(d))) {
          Object.defineProperty(document, 'domain', {
            value: domain,
            writable: true
          })
        }
      } catch (e) {}
    }

    //=========================================================================
    // Inline script embed prevention fix
    //=========================================================================

    const observeScripts = () =&gt; {
      const scriptSnippets = [
        { code: 'window.top !== window.self', replacement: 'false' },
        { code: 'self == top', replacement: 'true' },
        { code: 'top.location != window.location', replacement: 'false' }
      ]

      const getAddedScripts = mutationList =&gt;
        mutationList.reduce((scripts, mutation) =&gt; {
          if (mutation.type !== 'childList') return scripts
          const inlineScripts = Array.from(mutation.addedNodes).filter(
            node =&gt; node instanceof HTMLScriptElement &amp;&amp; node.innerHTML.length &gt; 0
          )
          return inlineScripts.length &gt; 0 ? [...scripts, ...inlineScripts] : scripts
        }, [])

      // Modifies inline scripts to allow embedding content in iframe
      const inlineScriptModifier = mutationsList =&gt; {
        const scripts = getAddedScripts(mutationsList)
        for (let script of scripts) {
          for (let snippet of scriptSnippets) {
            if (script.innerHTML.includes(snippet.code)) {
              script.innerHTML = script.innerHTML.split(snippet.code).join(snippet.replacement)
            }
          }
        }
      }

      const observer = new MutationObserver(inlineScriptModifier)
      observer.observe(document.documentElement, { childList: true, subtree: true })

      // Stop watching for changes after we finish loading
      window.addEventListener('load', () =&gt; observer.disconnect())
    }

    observeScripts()
  }());</script><g id="Pipe-Industry-Water-Oil-Gas"><path d="M61,14H53.82A3.01,3.01,0,0,0,51,12H49a3.01,3.01,0,0,0-2.82,2H43A17.024,17.024,0,0,0,26,31v3.18A3.01,3.01,0,0,0,24,37v2a3.01,3.01,0,0,0,2,2.82V45a5,5,0,0,1-10,0V41.82A3.01,3.01,0,0,0,18,39V37a3.01,3.01,0,0,0-2-2.82V3a1,1,0,0,0-1-1H5A1,1,0,0,0,4,3V34.18A3.01,3.01,0,0,0,2,37v2a3.01,3.01,0,0,0,2,2.82V45a17,17,0,0,0,34,0V41.82A3.01,3.01,0,0,0,40,39V37a3.01,3.01,0,0,0-2-2.82V31a5,5,0,0,1,5-5h3.18A3.01,3.01,0,0,0,49,28h2a3.01,3.01,0,0,0,2.82-2H61a1,1,0,0,0,1-1V15A1,1,0,0,0,61,14ZM6,4h8V34H6ZM4,39V37a1,1,0,0,1,1-1H15a1,1,0,0,1,1,1v2a1,1,0,0,1-1,1H5A1,1,0,0,1,4,39Zm32,6A15,15,0,0,1,6,45V42h8v3a7,7,0,0,0,14,0V42h8Zm2-6a1,1,0,0,1-1,1H27a1,1,0,0,1-1-1V37a1,1,0,0,1,1-1H37a1,1,0,0,1,1,1Zm8-15H43a7.008,7.008,0,0,0-7,7v3H28V31A15.018,15.018,0,0,1,43,16h3Zm6,1a1,1,0,0,1-1,1H49a1,1,0,0,1-1-1V15a1,1,0,0,1,1-1h2a1,1,0,0,1,1,1Zm8-1H54V16h6Z" data-original="#000000" class="active-path" fill="#FFFFFF"/><path d="M13.811,55.833A12.939,12.939,0,0,0,21,58V56a10.952,10.952,0,0,1-6.082-1.833Z" data-original="#000000" class="active-path" fill="#FFFFFF"/><path d="M22.835,55.848l.33,1.972a12.782,12.782,0,0,0,2.168-.56l-.666-1.885A11.049,11.049,0,0,1,22.835,55.848Z" data-original="#000000" class="active-path" fill="#FFFFFF"/></g></g> </svg>
